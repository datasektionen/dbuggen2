DROP SCHEMA IF EXISTS Archive CASCADE;
CREATE SCHEMA Archive;

CREATE TABLE IF NOT EXISTS Archive.Issue (
    id              INT PRIMARY KEY,
    title           VARCHAR(255) NOT NULL,
    publishing_date DATE NOT NULL,
    pdf             INT
        REFERENCES Archive.External
        ON UPDATE CASCADE
        ON DELETE SET NULL,
    html            INT
        REFERENCES Archive.External
        ON UPDATE CASCADE
        ON DELETE SET NULL,
    views           INT
);

CREATE TABLE IF NOT EXISTS Archive.Article (
    id          INT PRIMARY KEY,
    issue       INT
        REFERENCES Archive.Issue
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    author_text TEXT, -- if you want something else than their names
    issue_index INT, -- The index of the article in the issue
    content     TEXT NOT NULL, -- The article in markdown format
    last_edited DATE NOT NULL,
    n0lle_safe  BOOLEAN NOT NULL -- If it's safe for n√òllan to read
);

CREATE TYPE external_type AS ENUM (
    'pdf',
    'html',
    'image'
);

CREATE TABLE IF NOT EXISTS Archive.External (
    id               INT PRIMARY KEY,
    hosted_url       TEXT NOT NULL,
    type_of_external EXTERNAL_TYPE NOT NULL
);

CREATE TABLE IF NOT EXISTS Archive.PictureUsedInArticle (
    article_id INT
        REFERENCES Archive.Article
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    picture_id INT
        REFERENCES Archive.External
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    PRIMARY KEY(article_id, picture_id)
);

CREATE TABLE IF NOT EXISTS Archive.Member (
    kth_id    VARCHAR(255) PRIMARY KEY,
    title     VARCHAR(255),
    picture   INT
        REFERENCES Archive.External
        ON UPDATE CASCADE
        ON DELETE SET NULL,
    active    BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS Archive.AuthoredBy (
    article_id  INT
        REFERENCES Archive.Article
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    member_id   VARCHAR(255)
        REFERENCES Archive.External
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    PRIMARY KEY(article_id, member_id)
);
